name: Map-it
description: 'Custom cycling maps from OpenStreetMap data'
attribution: Data Â© OpenStreetMap (and) contributors, ODbL
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
format: pdf
interactivity: false
minzoom: 13
maxzoom: 13
srs: "+init=epsg:3857"

# Various parts to be included later on
_parts:
  extents: &extents
    extent: *world
    srs-name: "WGS84"
    srs: "+init=epsg:4326"
    srid: 4326
  extentsOSM: &extentsOSM
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  osm2pgsql: &osm2pgsql
    type: postgis
    host: postgres-osm 
    dbname: gis
    user: postgres
    password: postgres
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
    srid: 4326

Stylesheet:
  - styles.mss

# Geometry
# linestring, point, polygon, raster

Layer:
- id: landuse-background
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          CASE
            WHEN landuse = 'forest' OR "natural" = 'wood' THEN 'forest'
            WHEN aeroway IN ('aerodrome') THEN 'aerodrome'
          END as type
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          (
            (
              landuse = 'forest' OR
              "natural" = 'wood'
            ) OR
            aeroway IN ('aerodrome')
          )
        ORDER BY
          CASE
            WHEN landuse = 'residential' THEN 1
            WHEN landuse = 'military' THEN 2
          END ASC
      ) AS data
- id: shade
  geometry: raster
  <<: *extents
  Datasource:
    type: gdal
    file: data/combined.tif
- id: contours
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          CASE
            WHEN (MOD(height::int, 100) = 0) THEN 'yes'
            ELSE 'no'
          END as boundary
        FROM
          contours
        WHERE
          way && !bbox!
      ) AS data
- id: landuse-foreground
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          landuse as type
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          landuse IN (
            'residential',
            'industrial',
            'military'
          )
        ORDER BY
          CASE
            WHEN landuse = 'industrial' THEN 1
            WHEN landuse = 'residential' THEN 2
            WHEN landuse = 'military' THEN 3
          END ASC
      ) AS data
- id: cycling-network
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          route = 'bicycle'
      ) AS data
- id: waterways
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          waterway IN (
            'river',
            'stream',
            'canal',
            'drain'
          ) AND
          (tunnel IS NULL OR tunnel != 'yes')
      ) AS data
- id: water
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          "natural" = 'water'
      ) AS data
- id: boundaries
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    # Administrative boundaries: Levels 0 to 6 are included which has (super-)country
    #   and state administrative borders
    table: |-
      (
        WITH administrative AS (
          SELECT
            way,
            boundary,
            admin_level::int as admin_level
          FROM
            planet_osm_roads
          WHERE
            way && !bbox! AND
            boundary = 'administrative' AND
            admin_level in (
              '0',
              '1',
              '2',
              '3',
              '4',
              '5',
              '6'
            ) AND
            osm_id < 0
        ),
        national_parks AS (
          SELECT
            way,
            'national_park'::text as boundary,
            null::int as admin_level
          FROM
            planet_osm_polygon
          WHERE
            way && !bbox! AND
            (
              boundary = 'national_park' OR
              (boundary = 'protected_area' AND protect_class IN ('1','1a','1b','2','3','4','5','6'))
            ) AND
            way_area >= 5e5
        )
        SELECT
          *
        FROM
          (
            SELECT
              *
            FROM
              administrative
            UNION ALL

            SELECT
              *
            FROM
              national_parks
          ) AS bondaries
        ORDER BY
          CASE
            WHEN boundary = 'administrative' then 1
            WHEN boundary = 'national_park' then 2
            ELSE 100
          END ASC,
          admin_level::int DESC
      ) AS data
- id: ferry
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          route = 'ferry'
      ) AS data
- id: tunnels
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          *
        FROM (
          SELECT
            way,
            layer,
            highway as type
          FROM
            planet_osm_line
          WHERE
            way && !bbox! AND
            highway IN (
              'motorway_link',
              'trunk_link',
              'secondary_link',
              'primary_link',
              'motorway',
              'trunk',
              'cycleway',
              'tertiary',
              'secondary',
              'primary'
            ) AND
            (access IS NULL OR access != 'private') AND
            (tunnel = 'yes')

          UNION ALL

          SELECT
            way,
            layer,
            'railway' as type
          FROM
            planet_osm_line
          WHERE
            way && !bbox! AND
            railway IN (
              'rail',
              'narrow_gauge'
            ) AND
            tunnel = 'yes' AND
            (
              service IS NULL OR
              service NOT IN (
                'crossover',
                'siding',
                'spur',
                'yard'
              )
            )
          ) AS tunnels
        ORDER BY
          CASE
            WHEN layer IS NOT NULL AND layer ~ '-?\d+' THEN layer::int
            ELSE -1
          END ASC,
          CASE
            WHEN type = 'railway' THEN 1
            WHEN type = 'motorway_link' THEN 10
            WHEN type = 'trunk_link' THEN 11
            WHEN type = 'secondary_link' THEN 12
            WHEN type = 'primary_link' THEN 13
            WHEN type = 'motorway' THEN 14
            WHEN type = 'trunk' THEN 15
            WHEN type = 'unclassified' THEN 100
            WHEN type = 'residential' THEN 101
            WHEN type = 'cycleway' THEN 102
            WHEN type = 'tertiary' THEN 103
            WHEN type = 'secondary' THEN 104
            WHEN type = 'primary' THEN 105
            ELSE 50
          END ASC
      ) AS data
- id: aeroway
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          aeroway
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          aeroway IN (
            'runway'
          )
      ) AS data
- id: roads
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          *
        FROM (
          SELECT
            way,
            CASE
              WHEN bicycle = 'designated' THEN 'cycleway'
              WHEN highway = 'road' THEN 'unclassified'
              WHEN highway = 'living_street' THEN 'residential'
              ELSE highway
            END as type,
            NULL as railway,
            CASE
              WHEN bicycle IN ('yes', 'designated', 'permissive') THEN 'T'
              ELSE 'F'
            END as bicycle,
            tracktype,
            REPLACE(ref, ';', ' / ') as ref,
            layer
          FROM
            planet_osm_line
          WHERE
            way && !bbox! AND
            highway IS NOT NULL AND
            highway NOT IN ('platform', 'construction', 'proposed', 'steps') AND
            (access IS NULL OR access != 'private') AND
            (tunnel IS NULL OR tunnel != 'yes')

          UNION ALL

          SELECT
            way,
            'railway' as type,
            railway,
            'F' as bicycle,
            NULL as tracktype,
            NULL as ref,
            layer
          FROM
            planet_osm_line
          WHERE
            way && !bbox! AND
            railway IN (
              'rail',
              'narrow_gauge',
              'preserved'
            ) AND
            (tunnel IS NULL OR tunnel != 'yes') AND
            (
              service IS NULL OR
              service NOT IN (
                'crossover',
                'siding',
                'spur',
                'yard'
              )
            )
        ) AS roads
        ORDER BY
          CASE
            WHEN layer IS NOT NULL AND layer ~ '-?\d+' THEN layer::int
            ELSE 0
          END ASC,
          CASE
            WHEN type = 'railway' THEN 1
            WHEN type = 'motorway_link' THEN 10
            WHEN type = 'trunk_link' THEN 11
            WHEN type = 'secondary_link' THEN 12
            WHEN type = 'primary_link' THEN 13
            WHEN type = 'motorway' THEN 14
            WHEN type = 'trunk' THEN 15
            WHEN type = 'unclassified' THEN 100
            WHEN type = 'residential' THEN 101
            WHEN type = 'cycleway' THEN 102
            WHEN type = 'tertiary' THEN 103
            WHEN type = 'secondary' THEN 104
            WHEN type = 'primary' THEN 105
            ELSE 50
          END ASC
      ) AS data
- id: power-line
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          power = 'line'
      ) AS data
- id: cycling-nodes
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          rcn_ref is not null AND
          "network:type" = 'node_network'
      ) AS data
- id: power-pole
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          power = 'tower'
      ) AS data
- id: transport
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH points AS (
          SELECT
            way,
            aeroway,
            railway,
            station
          FROM
            planet_osm_point
          WHERE
            way && !bbox! AND
            (
              aeroway IS NOT NULL OR
              railway IS NOT NULL
            )

          UNION ALL

          SELECT
            ST_PointOnSurface(way) as way,
            aeroway,
            railway,
            station
          FROM
            planet_osm_polygon
          WHERE
            way && !bbox! AND
            (
              aeroway IS NOT NULL OR
              railway IS NOT NULL
            )
        )
        SELECT
          way,
          CASE
            WHEN aeroway IN ('aerodrome') THEN 'aerodrome'
            WHEN railway IN ('station', 'halt') THEN 'train_station'
          END as type
        FROM
          points
        WHERE
          way && !bbox! AND
          aeroway IN (
            'aerodrome'
          ) OR
          (
            railway IN (
              'station',
              'halt'
            ) AND
            (station IS NULL OR station NOT IN (
              'subway',
              'light_rail',
              'monorail',
              'funicular'
            ))
          )
      ) AS data
- id: cycling-nodes-labels
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_PointOnSurface(ST_Union(nodes.way)) as way,
          nodes.ref
        FROM (
            SELECT
              way,
              rcn_ref as ref
            FROM
              planet_osm_point
            WHERE
              way && !bbox! AND
              rcn_ref is not null AND
              "network:type" = 'node_network'
        ) nodes
        GROUP BY
          nodes.ref,
          ST_SnapToGrid(ST_Transform(nodes.way, 3785), 3000)
      ) AS data
- id: poi
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH points AS (
          SELECT
            way,
            tourism,
            amenity,
            historic,
            man_made,
            "natural",
            shop,
            religion,
            power,
            "tower:type",
            CASE
              WHEN height IS NOT NULL AND height ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(height, '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
            END as height,
            CASE
              WHEN ele ~ '^-?\d{1,4}(\.\d+)?$' THEN (ROUND(ele::NUMERIC)::TEXT) || ' m'
            END as ele,
            location,
            "generator:source",
            mountain_pass as mountain_pass,
            tents,
            surface
          FROM
            planet_osm_point
          WHERE
            way && !bbox! AND
            (
              amenity IS NOT NULL OR
              tourism IS NOT NULL OR
              historic IS NOT NULL OR
              man_made IS NOT NULL OR
              shop IS NOT NULL OR
              power IS NOT NULL OR
              religion IS NOT NULL OR
              "natural" IS NOT NULL OR
              mountain_pass IS NOT NULL
            )

          UNION ALL

          SELECT
            ST_PointOnSurface(way) AS way,
            tourism,
            amenity,
            historic,
            man_made,
            "natural",
            shop,
            religion,
            power,
            "tower:type",
            CASE
              WHEN height IS NOT NULL AND height ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(height, '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
            END as height,
            NULL as ele,
            location,
            "generator:source",
            NULL as mountain_pass,
            tents,
            surface
          FROM
            planet_osm_polygon
          WHERE
            way && !bbox! AND
            (
              amenity IS NOT NULL OR
              tourism IS NOT NULL OR
              historic IS NOT NULL OR
              man_made IS NOT NULL OR
              shop IS NOT NULL OR
              power IS NOT NULL OR
              religion IS NOT NULL
            )
        )
        SELECT
          *
        FROM (
          SELECT
            way,
            CASE
              WHEN tourism = 'camp_site' THEN 'camp_site'
              WHEN tourism = 'caravan_site' AND tents = 'yes' THEN 'camp_site'
              WHEN tourism = 'caravan_site' THEN 'caravan_site'
              WHEN shop = 'supermarket' THEN 'supermarket'
              WHEN shop = 'bicycle_shop' THEN 'bicycle_shop'
              WHEN amenity = 'hospital' THEN 'hospital'
              WHEN historic = 'castle' THEN 'castle'
              WHEN historic = 'fort' THEN 'fort'
              WHEN historic = 'ruins' THEN 'ruins'
              WHEN man_made = 'lighthouse' THEN 'lighthouse'
              WHEN man_made = 'communications_tower' THEN 'tower_communication'
              WHEN power = 'generator' THEN 'wind_power'
              WHEN man_made IN ('mast', 'tower') THEN 'tower_' || "tower:type"
              WHEN amenity = 'place_of_worship' THEN 'place_of_worship'
              WHEN amenity = 'ferry_terminal' THEN 'ferry_terminal'
              WHEN mountain_pass = 'yes' THEN 'mountain_pass'
              WHEN "natural" = 'peak' THEN 'peak'
            END as type,
            religion,
            ele
          FROM
            points
          WHERE
            (
              tourism IN (
                'camp_site'
              ) OR
              (
                tourism = 'caravan_site' AND
                (tents IS NULL OR tents != 'no') AND
                (amenity IS NULL OR amenity != 'parking') AND
                (surface IS NULL OR (
                  surface NOT IN ('asphalt', 'paved', 'sett') AND
                  surface !~ 'stone' AND
                  surface !~ 'concrete' AND
                  surface !~ 'cobblestone'
                ))
              ) OR
              shop IN (
                'supermarket',
                'bicycle_shop'
              ) OR
              amenity IN (
                'hospital',
                'place_of_worship',
                'ferry_terminal'
              ) OR
              historic IN (
                'castle',
                'fort',
                'ruins'
              ) OR
              man_made IN (
                'lighthouse',
                'communications_tower'
              ) OR
              (
                man_made IN ('tower', 'mast') AND
                "tower:type" IN (
                  'communication'
                  'observation',
                  'cooling'
                ) AND
                ("tower:type" != 'communication' OR height >= 80)
              ) OR
              (
                power = 'generator' AND
                "generator:source" = 'wind'
              ) OR
              (
                mountain_pass = 'yes' AND
                EXISTS(
                  SELECT
                    road.way
                  FROM
                    planet_osm_line as road
                  WHERE
                    ST_DWithin(points.way, road.way, 50) AND
                    highway IN (
                      'motorway_link',
                      'trunk_link',
                      'secondary_link',
                      'primary_link',
                      'motorway',
                      'trunk',
                      'cycleway',
                      'tertiary',
                      'secondary',
                      'primary'
                    )
                )
              ) OR
              "natural" = 'peak'
            ) AND
            (historic IS NULL OR historic != 'wayside_shrine') AND
            (location IS NULL OR location NOT IN ('roof', 'rooftop'))
        ) as poi
        ORDER BY
          CASE
            WHEN type = 'camp_site' THEN 1
            WHEN type = 'caravan_site' THEN 2
            WHEN type = 'supermarket' THEN 3
            WHEN type = 'bicycle_shop' THEN 4
            WHEN type = 'mountain_pass' THEN 5
            WHEN type = 'ferry_terminal' THEN 6
            WHEN type = 'hospital' THEN 7
            WHEN type = 'castle' THEN 8
            WHEN type = 'fort' THEN 9
            WHEN type = 'ruins' THEN 10
            WHEN type = 'lighthouse' THEN 11
            WHEN type = 'tower_communication' THEN 12
            WHEN type = 'wind_power' THEN 13
            WHEN type = 'tower_cooling' THEN 14
            WHEN type = 'tower_observation' THEN 15
            WHEN type = 'place_of_worship' AND religion = 'christian' THEN 16
            WHEN type = 'place_of_worship' AND religion = 'muslim' THEN 17
            WHEN type = 'place_of_worship' THEN 18
            WHEN type = 'peak' THEN 19
            ELSE 100
          END ASC
      ) AS data
- id: places-important
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          place,
          name
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          name IS NOT NULL AND
          place IN (
            'city',
            'town',
            'village'
          )
        ORDER BY
          CASE
            WHEN (population ~ '^[0-9]{1,8}$') THEN population::INTEGER
            WHEN (place = 'city') THEN 100000
            WHEN (place = 'town') THEN 1000
            ELSE 1
          END DESC,
          length(name) DESC,
          name
      ) AS data
- id: national-park-labels
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_PointOnSurface(way) as way,
          name
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          (
            boundary = 'national_park' OR
            (boundary = 'protected_area' AND protect_class IN ('1','1a','1b','2','3','4','5','6'))
          ) AND
          name IS NOT NULL AND
          way_area >= 2e6
      ) AS data
- id: water-labels
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          name
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          "natural" = 'water' AND
          water IN (
            'lake',
            'lagoon'
          ) AND
          name IS NOT NULL AND
          way_area >= 2e6
      ) AS data
- id: places-non-important
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          place,
          name
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          name IS NOT NULL AND
          place IN (
            'hamlet'
          )
      ) AS data
- id: contour-labels
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          height
        FROM
          contours
        WHERE
          way && !bbox! AND
          MOD(height::int, 100) = 0
      ) AS data
- id: scale
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH bounds AS (
          SELECT
            ST_XMin(!bbox!)::NUMERIC AS xmin,
            ST_XMax(!bbox!)::NUMERIC AS xmax,
            ST_YMin(!bbox!)::NUMERIC AS ymin,
            ST_YMax(!bbox!)::NUMERIC AS ymax
        ), scale AS (
          SELECT
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.02) AS xbegin,
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.2) AS xend,
            bounds.ymin + ((bounds.ymax - bounds.ymin) * 0.99) AS yrender
          FROM
            bounds
        ), dist AS (
          SELECT
            ST_Distance(
              ST_Transform(ST_SetSRID(ST_MakePoint(scale.xbegin, scale.yrender), ST_SRID(!bbox!)), 3857),
              ST_Transform(ST_SetSRID(ST_MakePoint(scale.xend, scale.yrender), ST_SRID(!bbox!)), 3857)
            ) as fullDistance
          FROM
            scale
        ), scaleDistance AS (
          SELECT
            (scale.xend - scale.xbegin) * (1000 / dist.fullDistance) as xd
          FROM
            scale,
            dist
        )

        SELECT
          ST_MakeLine(
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender),
            ST_MakePoint(scale.xbegin + (number + 1) * scaleDistance.xd, scale.yrender)
          ) as way,
          null::text AS value
        FROM
          generate_series(0, 5) as number,
          scale,
          scaleDistance

        UNION ALL

        SELECT
          ST_MakeLine(
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender),
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender)
          ) as way,
          number::text ||
          (CASE
            WHEN number = 0 THEN ' km'
            ELSE ''
          END) as value
        FROM
          generate_series(0, 6) as number,
          scale,
          scaleDistance
      ) AS data
- id: copyright
  geometry: point
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH bounds AS (
          SELECT
            ST_XMin(!bbox!)::NUMERIC AS xmin,
            ST_XMax(!bbox!)::NUMERIC AS xmax,
            ST_YMin(!bbox!)::NUMERIC AS ymin,
            ST_YMax(!bbox!)::NUMERIC AS ymax
        )
        SELECT
          ST_MakePoint(
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.01),
            bounds.ymin + ((bounds.ymax - bounds.ymin) * 0.01)
          ) as way,
          'Â© OpenStreetMap contributors' AS label
        FROM
          bounds
      ) AS data
