name: Map-it
description: 'Custom cycling maps from OpenStreetMap data'
attribution: Data Â© OpenStreetMap (and) contributors, ODbL
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
format: pdf
interactivity: false
minzoom: 13
maxzoom: 13
srs: "+init=epsg:3857"

# Various parts to be included later on
_parts:
  extents: &extents
    extent: *world
    srs-name: "WGS84"
    srs: "+init=epsg:4326"
    srid: 4326
  extentsOSM: &extentsOSM
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  osm2pgsql: &osm2pgsql
    type: postgis
    host: postgres-osm 
    dbname: gis
    user: postgres
    password: postgres
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
    srid: 4326

Stylesheet:
  - styles.mss

# Geometry
# linestring, point, polygon, raster

Layer:
- id: landuse-background
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          'forest' as type
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          (
            landuse = 'forest' OR
            "natural" = 'wood'
          )
      ) AS data
- id: shade
  geometry: raster
  <<: *extents
  Datasource:
    type: gdal
    file: data/combined.tif
- id: contours
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          height,
          CASE
            WHEN (MOD(height::int, 100) = 0) THEN 'yes'
            ELSE 'no'
          END as boundary
        FROM
          contours
        WHERE
          way && !bbox!
      ) AS data
- id: landuse-foreground
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          landuse as type
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          landuse IN (
            'residential',
            'military'
          )
      ) AS data
- id: administrative-boundaries
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    # Levels 0 to 6 are included which has (super-)country and state administrative borders
    table: |-
      (
        SELECT
          way,
          admin_level::int as admin_level
        FROM
          planet_osm_roads
        WHERE
          way && !bbox! AND
          boundary = 'administrative' AND
          admin_level in (
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6'
          ) AND
          osm_id < 0
        ORDER BY
          admin_level::int DESC
      ) AS data
- id: waterways
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          waterway IN (
            'river',
            'stream',
            'canal',
            'drain'
          )
      ) AS data
- id: water
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          "natural" = 'water'
      ) AS data
- id: springs
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          "natural" = 'spring'

        UNION ALL

        SELECT
          ST_PointOnSurface(way) as way
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          "natural" = 'spring'
      ) AS data
- id: cycling-network
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          route = 'bicycle'
      ) AS data
- id: ferry
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          route = 'ferry'
      ) AS data
- id: aeroway
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          aeroway
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          aeroway IN (
            'runway'
          )
      ) AS data
- id: railways
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          railway = 'rail'
      ) AS data
- id: roads
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          fclass,
          bridge,
          ref
        FROM
          roads
        WHERE
          way && !bbox!
      ) AS data
- id: power-line
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          power = 'line'
      ) AS data
- id: cycling-nodes
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          (tags->'rcn_ref') is not null AND
          (tags->'network:type') = 'node_network'
      ) AS data
- id: power-pole
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          planet_osm_point
        WHERE
          way && !bbox! AND
          power = 'tower'
      ) AS data
- id: places
  geometry: point
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          fclass,
          name
        FROM
          places
        WHERE
          way && !bbox! AND
          name IS NOT NULL
          AND
            fclass IN (
              'national_capital',
              'city',
              'town',
              'village',
              'hamlet',
              'suburb',
              'locality'
            )
          AND
            (fclass != 'locality' OR population > 0)
      ) AS data
- id: transport
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH points AS (
          SELECT
            way,
            aeroway,
            railway
          FROM
            planet_osm_point
          WHERE
            way && !bbox! AND
            (
              aeroway IS NOT NULL OR
              railway IS NOT NULL
            )

          UNION ALL

          SELECT
            ST_PointOnSurface(way) as way,
            aeroway,
            railway
          FROM
            planet_osm_polygon
          WHERE
            way && !bbox! AND
            (
              aeroway IS NOT NULL OR
              railway IS NOT NULL
            )
        )
        SELECT
          way,
          CASE
            WHEN aeroway IN ('aerodrome') THEN 'aerodrome'
            WHEN railway IN ('station', 'halt') THEN 'train_station'
          END as type
        FROM
          points
        WHERE
          way && !bbox! AND
          aeroway IN (
            'aerodrome'
          ) OR
          railway IN (
            'station',
            'halt'
          )
      ) AS data
- id: towers
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH points AS (
          SELECT
            way,
            "tower:type",
            man_made,
            CASE
              WHEN (tags->'height') ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
            END as height
          FROM
            planet_osm_point
          WHERE
            way && !bbox! AND
            man_made IN (
              'tower',
              'mast',
              'communications_tower'
            ) AND
            ((tags->'location') NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)

          UNION ALL

          SELECT
            ST_PointOnSurface(way) as way,
            "tower:type",
            man_made,
            CASE
              WHEN (tags->'height') ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
            END as height
          FROM
            planet_osm_polygon
          WHERE
            way && !bbox! AND
            man_made IN (
              'tower',
              'mast',
              'communications_tower'
            ) AND
            ((tags->'location') NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)
        )
        SELECT
          way,
          CASE
            WHEN man_made = 'mast' THEN "tower:type"
            WHEN man_made = 'tower' THEN "tower:type"
            WHEN man_made = 'communications_tower' THEN 'communication'
          END as type
        FROM
          points
        WHERE
          man_made = 'communications_tower' OR
          (
            man_made IN ('tower', 'mast') AND
            "tower:type" IN (
              'communication'
              'observation',
              'cooling'
            ) AND
            ("tower:type" != 'communication' OR height >= 80)
          )
        ORDER BY
          CASE
            WHEN man_made = 'communications_tower' THEN 1
            WHEN man_made IN ('tower', 'mast') AND "tower:type" = 'communication' THEN 2
            WHEN man_made IN ('tower', 'mast') AND "tower:type" = 'cooling' THEN 3
            WHEN man_made IN ('tower', 'mast') AND "tower:type" = 'observation' THEN 4
            ELSE 100
          END ASC
      ) AS data
- id: cycling-nodes-labels
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_PointOnSurface(ST_Union(nodes.way)) as way,
          nodes.ref
        FROM (
            SELECT
              way,
              (tags->'rcn_ref') as ref
            FROM
              planet_osm_point
            WHERE
              way && !bbox! AND
              (tags->'rcn_ref') is not null AND
              (tags->'network:type') = 'node_network'
        ) nodes
        GROUP BY
          nodes.ref,
          ST_SnapToGrid(ST_Transform(nodes.way, 3785), 3000)
      ) AS data
- id: poi
  geometry: point
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT *
        FROM (
          SELECT
            way,
            fclass
          FROM
            poi
          WHERE
            way && !bbox! AND
            fclass IN (
               'camp_site',
               'hospital',
               'caravan_site',
               'supermarket',
               'bicycle_shop',
               'castle',
               'fort',
               'ruins',
               'lighthouse'
            )

          UNION ALL

          SELECT
            ST_PointOnSurface(way) AS way,
            fclass
          FROM
            poi_a
          WHERE
            way && !bbox! AND
            fclass IN (
              'camp_site',
              'hospital',
              'caravan_site',
              'supermarket',
              'bicycle_shop',
              'castle',
              'fort',
              'ruins',
              'lighthouse'
            )
        ) AS poi
        ORDER BY
          CASE
            WHEN fclass = 'camp_site' THEN 1
            WHEN fclass = 'supermarket' THEN 2
            WHEN fclass = 'caravan_site' THEN 3
            WHEN fclass = 'bicycle_shop' THEN 4
            WHEN fclass = 'hospital' THEN 5
            WHEN fclass = 'castle' THEN 6
            WHEN fclass = 'fort' THEN 7
            WHEN fclass = 'ruins' THEN 8
            WHEN fclass = 'lighthouse' THEN 9
            ELSE 100
          END ASC
      ) AS data
- id: religious
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          religion
        FROM (
          SELECT
            way,
            religion
          FROM
            planet_osm_point
          WHERE
            way && !bbox! AND
            amenity = 'place_of_worship' AND
            (historic IS NULL OR historic != 'wayside_shrine')

          UNION ALL

          SELECT
            ST_PointOnSurface(way) as way,
            religion
          FROM
            planet_osm_polygon
          WHERE
            way && !bbox! AND
            amenity = 'place_of_worship' AND
            (historic IS NULL OR historic != 'wayside_shrine')
        ) AS religious
        ORDER BY
          CASE
            WHEN religion = 'christian' THEN 1
            WHEN religion = 'muslim' THEN 2
            ELSE 100
          END ASC
      ) AS data
- id: scale
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH bounds AS (
          SELECT
            ST_XMin(!bbox!)::NUMERIC AS xmin,
            ST_XMax(!bbox!)::NUMERIC AS xmax,
            ST_YMin(!bbox!)::NUMERIC AS ymin,
            ST_YMax(!bbox!)::NUMERIC AS ymax
        ), scale AS (
          SELECT
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.02) AS xbegin,
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.2) AS xend,
            bounds.ymin + ((bounds.ymax - bounds.ymin) * 0.99) AS yrender
          FROM
            bounds
        ), dist AS (
          SELECT
            ST_Distance(
              ST_Transform(ST_SetSRID(ST_MakePoint(scale.xbegin, scale.yrender), ST_SRID(!bbox!)), 3857),
              ST_Transform(ST_SetSRID(ST_MakePoint(scale.xend, scale.yrender), ST_SRID(!bbox!)), 3857)
            ) * cos(
              radians(ST_Y(ST_Transform(
                ST_SetSRID(ST_MakePoint(scale.xbegin, scale.yrender), ST_SRID(!bbox!)),
                4326
              )))
            ) as fullDistance
          FROM
            scale
        ), scaleDistance AS (
          SELECT
            (scale.xend - scale.xbegin) * (1000 / dist.fullDistance) as xd
          FROM
            scale,
            dist
        )

        SELECT
          ST_MakeLine(
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender),
            ST_MakePoint(scale.xbegin + (number + 1) * scaleDistance.xd, scale.yrender)
          ) as way,
          null::text AS value
        FROM
          generate_series(0, 4) as number,
          scale,
          scaleDistance

        UNION ALL

        SELECT
          ST_MakeLine(
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender),
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender)
          ) as way,
          number::text ||
          (CASE
            WHEN number = 0 THEN ' km'
            ELSE ''
          END) as value
        FROM
          generate_series(0, 5) as number,
          scale,
          scaleDistance
      ) AS data
