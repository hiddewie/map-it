name: Map-it
description: 'Custom cycling maps from OpenStreetMap data'
attribution: Data Â© OpenStreetMap (and) contributors, ODbL
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 6.7422
  - 52.2623
  - 12
format: pdf
interactivity: false
minzoom: 12
maxzoom: 12
srs: "EPSG:3857"

# Various parts to be included later on
_parts:
  extents: &extents
    extent: *world
    srs-name: "WGS84"
    srs: "EPSG:4326"
    srid: 4326
  extentsOSM: &extentsOSM
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  osm2pgsql: &osm2pgsql
    type: postgis
    host: '@@PG_HOST@@'
    port: '@@PG_PORT@@'
    dbname: '@@PG_DATABASE@@'
    user: '@@PG_USER@@'
    password: '@@PG_PASSWORD@@'
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
    srid: 4326

Stylesheet:
  - styles.mss

Layer:
- id: map-background
  geometry: polygon
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_MakeEnvelope(-180, -89.9, 180, 89.9, 4326) as way
      ) AS data
- id: landuse-background
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_Union(way) as way,
          type
        FROM
          landuse_background
        WHERE
          way && !bbox!
        GROUP BY
          type
        ORDER BY
          CASE
            WHEN type = 'forest' THEN 1
            WHEN type = 'aerodrome' THEN 2
          END ASC
      ) AS data
- id: shade
  geometry: raster
  <<: *extents
  Datasource:
    type: gdal
    file: data/combined.tif
- id: contours
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_Intersection(way, !bbox!) as way,
          CASE
            WHEN (MOD(height::int, 100) = 0) THEN 'yes'
            ELSE 'no'
          END as boundary
        FROM
          contours
        WHERE
          way && !bbox! AND 
          height::int <> 0
      ) AS data
- id: landuse-foreground
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_Union(way) as way,
          type
        FROM
          landuse_foreground
        WHERE
          way && !bbox!
        GROUP BY
          type
        ORDER BY
          CASE
            WHEN type = 'industrial' THEN 1
            WHEN type = 'residential' THEN 2
            WHEN type = 'military' THEN 3
          END ASC
      ) AS data
- id: waterways
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          waterways
        WHERE
          way && !bbox!
      ) AS data
- id: water
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_Union(way) as way
        FROM
          water
        WHERE
          way && !bbox!

        UNION ALL

        SELECT
          way
        FROM
          coastlines
        WHERE
          way && !bbox!
      ) AS data
- id: dams
  geometry: polygon
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          type
        FROM
          dams
        WHERE
          way && !bbox!
      ) AS data
- id: administrative-boundaries
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          admin_level
        FROM
          administrative_boundaries
        WHERE
          way && !bbox!
        ORDER BY
          admin_level DESC
      ) AS data
- id: national-parks
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          national_parks
        WHERE
          way && !bbox!
      ) AS data
- id: ferry
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          ferries
        WHERE
          way && !bbox!
      ) AS data
- id: power-line
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          power_lines
        WHERE
          way && !bbox!
      ) AS data
- id: power-pole
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          power_poles
        WHERE
          way && !bbox!
      ) AS data
- id: tunnels
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          layer,
          type
        FROM
          tunnels
        WHERE
          way && !bbox!
        ORDER BY
          layer ASC,
          CASE
            WHEN type = 'railway' THEN 1
            WHEN type = 'motorway_link' THEN 10
            WHEN type = 'trunk_link' THEN 11
            WHEN type = 'secondary_link' THEN 12
            WHEN type = 'primary_link' THEN 13
            WHEN type = 'motorway' THEN 14
            WHEN type = 'trunk' THEN 15
            WHEN type = 'unclassified' THEN 100
            WHEN type = 'residential' THEN 101
            WHEN type = 'cycleway' THEN 102
            WHEN type = 'tertiary' THEN 103
            WHEN type = 'secondary' THEN 104
            WHEN type = 'primary' THEN 105
            ELSE 50
          END ASC
      ) AS data
- id: aeroway
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          aeroways
        WHERE
          way && !bbox!
      ) AS data
- id: roads
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          type,
          railway,
          CASE
            WHEN bicycle THEN 'T'
            ELSE 'F'
          END as bicycle,
          tracktype,
          layer
        FROM
          roads
        WHERE
          way && !bbox!
        ORDER BY
          layer ASC NULLS FIRST,
          CASE
            WHEN type = 'railway' THEN 1
            WHEN type = 'motorway_link' THEN 10
            WHEN type = 'trunk_link' THEN 11
            WHEN type = 'secondary_link' THEN 12
            WHEN type = 'primary_link' THEN 13
            WHEN type = 'motorway' THEN 14
            WHEN type = 'trunk' THEN 15
            WHEN type = 'unclassified' THEN 100
            WHEN type = 'residential' THEN 101
            WHEN type = 'cycleway' THEN 102
            WHEN type = 'tertiary' THEN 103
            WHEN type = 'secondary' THEN 104
            WHEN type = 'primary' THEN 105
            ELSE 50
          END ASC
      ) AS data
- id: cycling-nodes
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          cycling_nodes
        WHERE
          way && !bbox!
      ) AS data
- id: cycling-routes
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way
        FROM
          gpx
        WHERE
          EXISTS(SELECT * FROM gpx) AND
          way && !bbox!

        UNION ALL

        SELECT
          way
        FROM
          cycling_routes
        WHERE
          (NOT EXISTS(SELECT * FROM gpx)) AND
          way && !bbox!
      ) AS data
- id: transport
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          type
        FROM
          transport
        WHERE
          way && !bbox!
        ORDER BY
          CASE
            WHEN type = 'train_station' THEN 1
            WHEN type = 'ferry_terminal' THEN 2
            WHEN type = 'aerodrome' THEN 3
            ELSE 100
          END ASC
      ) AS data
- id: cycling-nodes-labels
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH clustered_nodes AS (
          SELECT
            way,
            ref,
            ST_ClusterDBSCAN(way, eps:= 3000, minpoints := 1)
              OVER (PARTITION by ref) as cluster
          FROM
            cycling_nodes
          WHERE
            way && !bbox!
        )

        SELECT
          ST_Centroid(ST_ConvexHull(ST_Collect(way))) as way,
          ref
        FROM
          clustered_nodes
        GROUP BY
          ref,
          cluster
      ) AS data
- id: poi
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          *
        FROM (
          SELECT
            ST_PointOnSurface(ST_Collect(way)) as way,
            'camp_site' as type,
            NULL as religion,
            NULL as ele,
            NULL as scout,
            NULL as isolation,
            'yes' as many
          FROM (
            SELECT
              way,
              ST_ClusterDBSCAN(way, eps := 300.0 / cosd(ST_Y(ST_Transform(way, 4326))), minpoints := 2) over () AS cid
            FROM
              pois
            WHERE
              type = 'camp_site'
          ) ungrouped_campings
          WHERE
            cid IS NOT NULL
          GROUP BY
            cid

          UNION ALL

          SELECT
            way,
            type,
            religion,
            CASE
              WHEN ele IS NOT NULL THEN ROUND(ele)::TEXT || ' m'
            END as ele,
            scout,
            peak_isolation.isolation as isolation,
            'no' as many
          FROM
            pois
          LEFT JOIN
            peak_isolation ON pois.osm_id = peak_isolation.osm_id
          LEFT JOIN
            mountain_pass_road ON pois.osm_id = mountain_pass_road.osm_id
          WHERE
            (
              type != 'mountain_pass' OR
              mountain_pass_road.road_osm_id IS NOT NULL
            ) AND
            (
              peak_isolation.isolation IS NULL OR 
              peak_isolation.isolation >= 2500
            )
        ) as poi
        ORDER BY
          CASE
            WHEN type = 'camp_site' and many = 'yes' THEN 1
            WHEN type = 'camp_site' THEN 2
            WHEN type = 'supermarket' THEN 3
            WHEN type = 'convenience_store' THEN 4
            WHEN type = 'bicycle_shop' THEN 5
            WHEN type = 'mountain_pass' THEN 6
            WHEN type = 'castle' THEN 7
            WHEN type = 'fort' THEN 8
            WHEN type = 'lighthouse' THEN 9
            WHEN type = 'tower_communication' THEN 10
            WHEN type = 'wind_power' THEN 11
            WHEN type = 'tower_cooling' THEN 12
            WHEN type = 'tower_observation' THEN 13
            WHEN type = 'tower_chimney' THEN 14
            WHEN type = 'place_of_worship' AND religion IS NOT NULL THEN 16
            WHEN type = 'place_of_worship' THEN 17
            WHEN type = 'peak' THEN 18
            ELSE 100
          END ASC
      ) AS data
- id: places-important
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          place,
          name
        FROM
          places
        WHERE
          way && !bbox! AND
          important
        ORDER BY
          CASE
            WHEN population IS NOT NULL THEN population
            WHEN (place = 'city') THEN 100000
            WHEN (place = 'town') THEN 1000
            ELSE 1
          END DESC,
          length(name) DESC,
          name
      ) AS data
- id: national-park-labels
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          ST_PointOnSurface(way) as way,
          name
        FROM
          national_parks
        WHERE
          way && !bbox! AND
          name IS NOT NULL
      ) AS data
- id: roads-labels
  geometry: linestring
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          highway as type,
          array_length(refs, 1) as height,
          (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) as width,
          array_to_string(refs, E'\n') as ref
        FROM (
          SELECT
            way,
            highway,
            access,
            tunnel,
            string_to_array(ref, ';') AS refs
          FROM
            planet_osm_line
          WHERE
            way && !bbox! AND
            ref IS NOT NULL AND
            highway IN (
              'tertiary',
              'secondary',
              'primary'
            ) AND
            (access IS NULL OR access != 'private') AND
            (tunnel IS NULL OR tunnel != 'yes')
        ) AS splitrefs
      ) AS data
- id: water-labels
  geometry: line
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          name,
          CASE
            WHEN water IN ('lake', 'lagoon') THEN water
            WHEN landuse IN ('reservoir', 'basin') then landuse
          END as type
        FROM
          planet_osm_polygon
        WHERE
          way && !bbox! AND
          "natural" = 'water' AND
          (
            water IN (
              'lake',
              'lagoon'
            ) OR
            landuse IN (
              'reservoir',
              'basin'
            )
          ) AND
          name IS NOT NULL AND
          way_area >= 2e6

        UNION ALL

        SELECT
          way,
          name,
          waterway as type
        FROM
          planet_osm_line
        WHERE
          way && !bbox! AND
          waterway IN (
            'river'
          ) AND
          (tunnel IS NULL OR tunnel != 'yes') AND
          name IS NOT NULL
      ) AS data
- id: places-non-important
  geometry: point
  <<: *extentsOSM
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          place,
          name
        FROM
          places
        WHERE
          way && !bbox! AND
          NOT important
        ORDER BY
          population DESC,
          length(name) DESC,
          name
      ) AS data
- id: contour-labels
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        SELECT
          way,
          height
        FROM
          contours
        WHERE
          way && !bbox! AND
          MOD(height::int, 100) = 0
      ) AS data
- id: scale
  geometry: linestring
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH bounds AS (
          SELECT
            ST_XMin(!bbox!)::NUMERIC AS xmin,
            ST_XMax(!bbox!)::NUMERIC AS xmax,
            ST_YMin(!bbox!)::NUMERIC AS ymin,
            ST_YMax(!bbox!)::NUMERIC AS ymax
          FROM
            scale_data
        ), scale AS (
          SELECT
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.02) AS xbegin,
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.2) AS xend,
            bounds.ymin + ((bounds.ymax - bounds.ymin) * 0.99) AS yrender
          FROM
            bounds
        ), dist AS (
          SELECT
            ST_Distance(
              ST_Transform(ST_SetSRID(ST_MakePoint(scale.xbegin, scale.yrender), ST_SRID(!bbox!)), 3857),
              ST_Transform(ST_SetSRID(ST_MakePoint(scale.xend, scale.yrender), ST_SRID(!bbox!)), 3857)
            ) as fullDistance
          FROM
            scale
        ), scaleDistance AS (
          SELECT
            (scale.xend - scale.xbegin) * (1000 / dist.fullDistance) as xd
          FROM
            scale,
            dist
        )

        SELECT
          ST_MakeLine(
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender),
            ST_MakePoint(scale.xbegin + (number + 1) * scaleDistance.xd, scale.yrender)
          ) as way,
          null::text AS value
        FROM
          generate_series(0, 5) as number,
          scale,
          scaleDistance

        UNION ALL

        SELECT
          ST_MakeLine(
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender),
            ST_MakePoint(scale.xbegin + number * scaleDistance.xd, scale.yrender)
          ) as way,
          number::text ||
          (CASE
            WHEN number = 0 THEN ' km'
            ELSE ''
          END) as value
        FROM
          generate_series(0, 6) as number,
          scale,
          scaleDistance
      ) AS data
- id: copyright
  geometry: point
  <<: *extents
  Datasource:
    <<: *osm2pgsql
    table: |-
      (
        WITH bounds AS (
          SELECT
            ST_XMin(!bbox!)::NUMERIC AS xmin,
            ST_XMax(!bbox!)::NUMERIC AS xmax,
            ST_YMin(!bbox!)::NUMERIC AS ymin,
            ST_YMax(!bbox!)::NUMERIC AS ymax
          FROM
            copyright
        )
        SELECT
          ST_MakePoint(
            bounds.xmin + ((bounds.xmax - bounds.xmin) * 0.01),
            bounds.ymin + ((bounds.ymax - bounds.ymin) * 0.01)
          ) as way,
          'Â© OpenStreetMap contributors' AS label
        FROM
          bounds
      ) AS data
