version: v1.0
name: Docker
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

auto_cancel:
  running:
    when: "branch != 'master'"

blocks:
  - name: Build and run
    task:
      secrets:
        - name: usgs
        - name: dockerhub
      jobs:
        - name: Build and run Docker images
          commands:
            - checkout
            - echo $DOCKERHUB_PASSWORD | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            - export PROJECT_DIR=`pwd`
            - cache restore data-`date +%Y-%m`

            # Import image
            - docker pull $DOCKERHUB_USERNAME/map-it-import:master
            - docker pull $DOCKERHUB_USERNAME/map-it-import:$SEMAPHORE_GIT_BRANCH
            - docker build \
                -t map-it-import \
                -f import.Dockerfile \
                --cache-from $DOCKERHUB_USERNAME/map-it-import:master \
                --cache-from $DOCKERHUB_USERNAME/map-it-import:$SEMAPHORE_GIT_BRANCH \
                .
            - docker tag map-it-import $DOCKERHUB_USERNAME/map-it-import:$SEMAPHORE_GIT_BRANCH
            - docker push $DOCKERHUB_USERNAME/map-it-import:$SEMAPHORE_GIT_BRANCH

            # Bounds image
            - docker pull $DOCKERHUB_USERNAME/map-it-bounds:master
            - docker pull $DOCKERHUB_USERNAME/map-it-bounds:$SEMAPHORE_GIT_BRANCH
            - docker build \
              -t map-it-bounds \
              -f import.Dockerfile \
              --cache-from $DOCKERHUB_USERNAME/map-it-bounds:master \
              --cache-from $DOCKERHUB_USERNAME/map-it-bounds:$SEMAPHORE_GIT_BRANCH \
              .
            - docker tag map-it-bounds $DOCKERHUB_USERNAME/map-it-bounds:$SEMAPHORE_GIT_BRANCH
            - docker push $DOCKERHUB_USERNAME/map-it-bounds:$SEMAPHORE_GIT_BRANCH

            # Map image
            - docker pull $DOCKERHUB_USERNAME/map-it:master
            - docker pull $DOCKERHUB_USERNAME/map-it:$SEMAPHORE_GIT_BRANCH
              - docker build \
              -t map-it \
              -f import.Dockerfile \
              --cache-from $DOCKERHUB_USERNAME/map-it:master \
              --cache-from $DOCKERHUB_USERNAME/map-it:$SEMAPHORE_GIT_BRANCH \
              .
              - docker tag map-it $DOCKERHUB_USERNAME/map-it:$SEMAPHORE_GIT_BRANCH
              - docker push $DOCKERHUB_USERNAME/map-it:$SEMAPHORE_GIT_BRANCH

            # Run database
            - docker run -d --name postgres-osm openfirmware/postgres-osm

            # Run import for small area
            - |
              BBOX=$(docker run -ti \
                --rm \
                -e BBOX="43.3146:41.49:43.8202:41.8238" \
                -e PAPER_SIZE="A2" \
                -e PAGE_OVERLAP="5%" \
                -e PAPER_ORIENTATION="landscape" \
                -e SCALE="1:150000" \
                map-it-bounds)
            - 'echo "Bounding box: $BBOX"'
            - |
              docker run \
                -ti \
                --rm \
                -v $PROJECT_DIR/data:/data \
                --link postgres-osm:postgres-osm \
                -e PG_HOST=postgres-osm \
                -e PG_PORT=5432 \
                -e PG_USER="osm" \
                -e PG_PASSWORD="" \
                -e PG_DATABASE="gis" \
                -e USGS_USERNAME="$USGS_USERNAME" \
                -e USGS_PASSWORD="$USGS_PASSWORD" \
                -e FEATURE_COUNTRIES="europe/georgia" \
                -e BBOX="${BBOX%%[[:space:]]}" \
                map-it-import
            - |
              docker run -ti \
                --rm \
                -v $PROJECT_DIR/data:/map-it/data \
                -v $PROJECT_DIR/output:/map-it/output \
                --link postgres-osm:postgres-osm \
                -e PG_HOST=postgres-osm \
                -e PG_PORT=5432 \
                -e PG_USER="osm" \
                -e PG_PASSWORD="" \
                -e PG_DATABASE="gis" \
                -e MAP_NAME="map" \
                -e BBOX="${BBOX%%[[:space:]]}" \
                -e PAPER_SIZE="A2" \
                -e PAGE_OVERLAP="5%" \
                -e PAPER_ORIENTATION="landscape" \
                -e SCALE="1:150000" \
                map-it
            - artifact push workflow --expire-in 2w output/map.pdf
            - cache store data-`date +%Y-%m` data
